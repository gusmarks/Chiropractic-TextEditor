// wxprec is requierd for the wx widgets files to be found// app.h, Buttons.h  and frame.h are included files that define methods used in this file// fstream allow us to open and close certain files//include bitmaps to add images to controls#include "bitmaps/bold.xpm"#include "bitmaps/italic.xpm"#include "bitmaps/underline.xpm"#include "bitmaps/alignleft.xpm"#include "bitmaps/alignright.xpm"#include "bitmaps/centre.xpm"//include rich text styles#include <wx/richtext/richtextstyles.h>//include custom classess#include "app.h"#include "NavLink.h"//#include "DialogHelper.h"#include "ButtonPanel.h"#include "Frame.h"#include "FunctionHelper.h"#include "LinkPanel.h"//include general functionaly and wx specific functions#include <wx/wfstream.h>#include <wx/wxprec.h>#include <fstream>#include <ctime>#include <wx/msgdlg.h>#include <wx/url.h>#include <wx/icon.h>#include <filesystem>#include "wx/richtext/richtextctrl.h"#include "wx/richtext/richtextstyles.h"#include "wx/richtext/richtextxml.h"#include "wx/richtext/richtexthtml.h"#include "wx/richtext/richtextformatdlg.h"#include "wx/richtext/richtextsymboldlg.h"#include "wx/richtext/richtextstyledlg.h"#include "wx/richtext/richtextprint.h"#include "wx/richtext/richtextimagedlg.h"using namespace std;#ifndef WX_PRECOMP#include <wx/wx.h>#endif////////////////////////////////////event table////////////////////////////////////////////// this event table connects widget ids to functions.BEGIN_EVENT_TABLE(MainFrame, wxFrame)EVT_MENU(MENU_New, MainFrame::newFile)EVT_MENU(MENU_Open, MainFrame::openFile)EVT_MENU(MENU_Close, MainFrame::closeFile)EVT_MENU(MENU_Save, MainFrame::saveFile)EVT_MENU(MENU_SaveAs, MainFrame::saveFileAs)EVT_MENU(MENU_Quit, MainFrame::quit)EVT_MENU(MENU_EditButtonName, MainFrame::onPopUpCLick)EVT_MENU(MENU_EditButtonText, MainFrame::onPopUpCLick)EVT_MENU(MENU_RemoveButton,MainFrame::onPopUpCLick)EVT_MENU(MENU_chanegDialog, MainFrame::onPopUpCLick)EVT_MENU(MENU_SaveButtons, MainFrame::SavePanelsAndButtons)EVT_MENU(ID_FORMAT_BOLD, MainFrame::OnBold)EVT_MENU(ID_FORMAT_ITALIC, MainFrame::OnItalic)EVT_MENU(ID_FORMAT_UNDERLINE, MainFrame::OnUnderline)EVT_MENU(ID_FORMAT_ALIGN_LEFT, MainFrame::OnAlignLeft)EVT_MENU(ID_FORMAT_ALIGN_CENTRE, MainFrame::OnAlignCentre)EVT_MENU(ID_FORMAT_ALIGN_RIGHT, MainFrame::OnAlignRight)EVT_BUTTON(BUTTON_Add, MainFrame::AddButton)EVT_BUTTON(BUTTON_Sign, MainFrame::Sign)EVT_BUTTON(BUTTON_NewSet, MainFrame::newSet)EVT_CHOICE(CHOICE_SWAP_Set, MainFrame::SwapButtonSet)EVT_HYPERLINK(LINK_NAVIGATE, MainFrame::LinkNavigation)EVT_TEXT_URL(TEXT_Main,MainFrame::DialofURLHelper)/*EVT_MENU(ID_FORMAT_STRIKETHROUGH, MainFrame::OnStrikethrough)EVT_MENU(ID_FORMAT_SUPERSCRIPT, MainFrame::OnSuperscript)EVT_MENU(ID_FORMAT_SUBSCRIPT, MainFrame::OnSubscript)*/END_EVENT_TABLE()void loadButtonSetInfo(std::string path);///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////main application///////////////////////////// Initializes the MainApplication class and tells our program to run itIMPLEMENT_APP(MainApplication) bool MainApplication::OnInit(){    //main frame constructor     m_styleSheet = new wxRichTextStyleSheet();    MainFrame* MainWin = new MainFrame(wxT("DocuMaster"), wxPoint(1, 1),        wxSize(300, 200)); // Create an instance of our frame, or window    MainWin->Show(TRUE); // show the window    MainWin->SetIcon(wxIcon("SAMPLE"));   // MainWin->SetIcon(wxIcon());    SetTopWindow(MainWin);// and finally, set it as the main window        return TRUE;}////////////////////////////////////////////////////////////////////////////////////////////////////////////////main frame method//////////////////////////// <summary>/// this is the constructor for the frame, it takes in 3 paramiters to build the frame with./// </summary>/// <param name="title"></param>/// <param name="pos"></param>/// <param name="size"></param>MainFrame::MainFrame(const wxString& title,    const wxPoint& pos, const wxSize& size)    : wxFrame((wxFrame*)NULL, -1, title, pos, size){    wxInitAllImageHandlers();    //loads the basic data for button sets    loadButtonSetInfo("SetInfoAll.txt");       //-----------menu-status start-----------    //statusbar at the bottom of page has 2 cells    //menu bar at the top ofthe page has 1 tab named File menu and visualy represented as File    //the File tab has 7 options: new file, open file,close file, save file, save file as, save button layout and quit.    CreateStatusBar(2);    MainMenu = new wxMenuBar();    wxMenu* FileMenu = new wxMenu();    FileMenu->Append(MENU_New, wxT("&New"),        wxT("Create a new file"));    FileMenu->Append(MENU_Open, wxT("&Open"),        wxT("Open an existing file"));    FileMenu->Append(MENU_Close, wxT("&Close"),        wxT("Close the current document"));    FileMenu->Append(MENU_Save, wxT("&Save"),        wxT("Save the current document"));    FileMenu->Append(MENU_SaveAs, wxT("Save &As"),        wxT("Save the current document under a new file name"));    FileMenu->Append(MENU_SaveButtons, wxT(" &Save the button layout"),        wxT("Save the button layout"));    FileMenu->Append(MENU_Quit, wxT(" &Quit"),        wxT("Quit the editor"));    wxMenu* formatMenu = new wxMenu;    formatMenu->AppendCheckItem(ID_FORMAT_BOLD, _("&Bold\tCtrl+B"));    formatMenu->AppendCheckItem(ID_FORMAT_ITALIC, _("&Italic\tCtrl+I"));    formatMenu->AppendCheckItem(ID_FORMAT_UNDERLINE, _("&Underline\tCtrl+U"));    formatMenu->AppendSeparator();    formatMenu->AppendCheckItem(ID_FORMAT_ALIGN_LEFT, _("L&eft Align"));    formatMenu->AppendCheckItem(ID_FORMAT_ALIGN_RIGHT, _("&Right Align"));    formatMenu->AppendCheckItem(ID_FORMAT_ALIGN_CENTRE, _("&Centre"));    formatMenu->AppendSeparator();    //formatMenu->AppendCheckItem(ID_FORMAT_STRIKETHROUGH, _("Stri&kethrough"));    //formatMenu->AppendCheckItem(ID_FORMAT_SUPERSCRIPT, _("Superscrip&t"));    //formatMenu->AppendCheckItem(ID_FORMAT_SUBSCRIPT, _("Subscrip&t"));    //attach the menu items to the frame    MainMenu->Append(FileMenu, wxT("File"));    MainMenu->Append(formatMenu, wxT("format"));    SetMenuBar(MainMenu);       toolBar = new wxToolBar(this, wxID_ANY, wxDefaultPosition, wxDefaultSize,wxNO_BORDER);       toolBar->AddCheckTool(ID_FORMAT_BOLD, wxEmptyString, wxBitmap(bold_xpm), wxNullBitmap, _("Bold"));    toolBar->AddCheckTool(ID_FORMAT_ITALIC, wxEmptyString, wxBitmap(italic_xpm), wxNullBitmap, _("Italic"));    toolBar->AddCheckTool(ID_FORMAT_UNDERLINE, wxEmptyString, wxBitmap(underline_xpm), wxNullBitmap, _("Underline"));    toolBar->AddSeparator();    toolBar->AddCheckTool(ID_FORMAT_ALIGN_LEFT, wxEmptyString, wxBitmap(alignleft_xpm), wxNullBitmap, _("Align Left"));    toolBar->AddCheckTool(ID_FORMAT_ALIGN_CENTRE, wxEmptyString, wxBitmap(centre_xpm), wxNullBitmap, _("Centre"));    toolBar->AddCheckTool(ID_FORMAT_ALIGN_RIGHT, wxEmptyString, wxBitmap(alignright_xpm), wxNullBitmap, _("Align Right"));    toolBar->AddSeparator();        toolBar->Realize();    ////////////////////////menu-status end////////////////////////    //make 7 buttons, one to add dynamic buttons, one to sign the document    // 4 buttons to swap panels of dynamic buttons, and one to go to the previous panel.    Controls = new controlPanel(this, wxID_ANY, "Control Panel");    Links = new linkPanel(Controls, wxID_ANY, "Link Panel");    wxButton* AddButton = new wxButton(Controls, BUTTON_Add, "New Button", wxDefaultPosition, wxDefaultSize, 0, wxDefaultValidator, "add");    wxButton* SignButton = new wxButton(Controls, BUTTON_Sign, "Sign", wxDefaultPosition, wxDefaultSize, 0, wxDefaultValidator, "Apply Signiture to document");    wxButton* swapToPanelOne = new wxButton(Controls, Button_ControlPanel, "Subjective", wxDefaultPosition, wxDefaultSize, 0, wxDefaultValidator, "0");    wxButton* swapToPanelTwo = new wxButton(Controls, Button_ControlPanel, "Objective", wxDefaultPosition, wxDefaultSize, 0, wxDefaultValidator, "1");    wxButton* swapToPanelThree = new wxButton(Controls, Button_ControlPanel, "Assessment", wxDefaultPosition, wxDefaultSize, 0, wxDefaultValidator, "2");    wxButton* swapToPanelFour = new wxButton(Controls, Button_ControlPanel, "Plan", wxDefaultPosition, wxDefaultSize, 0, wxDefaultValidator, "3");    swapToPanelOne->Bind(wxEVT_BUTTON, &MainFrame::startSwapHelper, this);    swapToPanelTwo->Bind(wxEVT_BUTTON, &MainFrame::startSwapHelper, this);    swapToPanelThree->Bind(wxEVT_BUTTON, &MainFrame::startSwapHelper, this);    swapToPanelFour->Bind(wxEVT_BUTTON, &MainFrame::startSwapHelper, this);    //make a box sizer to add the buttons too        //add the buttons to the box sizer    Controls->addToControlSizer(Links, wxALIGN_CENTER);    Controls->addToControlSizer(AddButton);    Controls->addToControlSizer(SignButton);    Controls->addToControlSizer(swapToPanelOne);    Controls->addToControlSizer(swapToPanelTwo);    Controls->addToControlSizer(swapToPanelThree);    Controls->addToControlSizer(swapToPanelFour);    Controls->controlLayout();    //create a choice box so the user can select what set of buttons they want, and a button to create new button sets    userSelection = new wxChoice(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, 2, MainFrame::ButtonSetNames, 0, wxDefaultValidator, "userCHoice");    wxButton* newUser = new wxButton(this, BUTTON_NewSet, "New Set", wxDefaultPosition, wxDefaultSize, 0, wxDefaultValidator, "New Set");    //new sizer for the wxCHoice and the new set button    ButtonSetSizer = new wxBoxSizer(wxHORIZONTAL);    ButtonSetSizer->Add(userSelection);    ButtonSetSizer->Add(newUser);    //set the selection and mind the setswaping function    userSelection->SetSelection(0);    userSelection->Bind(wxEVT_CHOICE, &MainFrame::SwapButtonSet, this);    //instanciate the first set    currentButtonSet = ButtonSetList.at(0);    /////////////////////////////////////////////////////////////////////////    /////////////////////////////text editor/////////////////////////////////    MainEditBox = new wxRichTextCtrl(this,TEXT_Main, "", wxDefaultPosition, wxSize(700, 600), 0, wxDefaultValidator, "");       MainEditBox->SetInsertionPoint(0);    wxFont font(wxFontInfo(12).Family(wxFONTFAMILY_ROMAN));    MainEditBox->SetFont(font);    MainEditBox->SetMargins(10, 10);           wxRichTextBuffer::SetFloatingLayoutMode(false);    wxRichTextBuffer::AddHandler(new wxRichTextXMLHandler);    wxRichTextBuffer::AddHandler(new wxRichTextHTMLHandler);        //MainEditBox->Bind(wxEVT_LEFT_DCLICK, &MainFrame::clickURLinTextCtrl, this);    //an object to make and handel popups, error messages and questions    popUpHandeler = new DialogHelper(this);    functionHelper = new FuncHelper();    ///////////////////////////button layout//////////////////////////////     //loades the panels and buttons for the first set    currentButtonSet->loadPanelsAndButtons(currentButtonSet->getSetName());    //builds the first navlink, this mostly shows were the user currently is. as clicking it would bring you to the same panel     BuildNavLinks(currentButtonSet->getCurrentPanel());      // set the current panel object to be the first panel, and tell it to show.    currentButtonSet->getCurrentPanel()->Show();       /////////////////////////////////////////////////////////////////    ///////////////////////// arange sizers//////////////////////////    Mainsizer = new wxBoxSizer(wxVERTICAL);    Mainsizer->Add(ButtonSetSizer,1, wxALIGN_CENTER);    Mainsizer->Add(Controls, 1, wxEXPAND);    Mainsizer->Add(currentButtonSet->getCurrentPanel(),5, wxEXPAND);    Mainsizer->Add(toolBar, 1, wxEXPAND);    Mainsizer->AddSpacer(10);    Mainsizer->Add(MainEditBox, 5,wxALIGN_CENTER);    //set the sizer object "sizer" as the main sizer and update its layout, finaly centering the objects in the frame.    Mainsizer->Layout();    SetSizer(Mainsizer);    Centre();    Maximize();    BindAllButtons();}/////////////////////end Frame Constructor/////////////////////////////////////methods/////////////////////////// </summary>/// this method opens a dialog box that lets the user search thier file system /// and open any.doc file/// </summary>/// <param name="WXUNUSED"></param>void MainFrame::openFile(wxCommandEvent& WXUNUSED(event)){    if (popUpHandeler->confirmIntent("are you sure you want to open a new file and close this one?")) {        wxFileDialog            openFileDialog(this, _("Open Xml file"), "", "",                "Xml files (*.xml)|*.xml", wxFD_OPEN | wxFD_FILE_MUST_EXIST);        if (openFileDialog.ShowModal() == wxID_CANCEL)            return;     // the user changed idea...        // proceed loading the file chosen by the user;        // this can be done with e.g. wxWidgets input streams:        wxFileInputStream input_stream(openFileDialog.GetPath());        if (!input_stream.IsOk())        {            wxLogError("Cannot open file '%s'.", openFileDialog.GetPath());            return;        }        wxString file = openFileDialog.GetPath();        MainEditBox->Enable();        MainEditBox->SetBackgroundColour(wxColour(255,255,255));        MainEditBox->SetEditable(true);        MainEditBox->LoadFile(file);           }}/// <summary>/// this is esentualy the same as new file. clearing the text editor and the filename/// too let the user have a blank file/// </summary>/// <param name="WXUNUSED"></param>void MainFrame::closeFile(wxCommandEvent& WXUNUSED(event)){    if (popUpHandeler->confirmIntent("are you sure you want to close the file?")) {        MainEditBox->DiscardEdits();        MainEditBox->Clear();        MainEditBox->Disable();        MainEditBox->SetBackgroundColour(wxColour(211,211,211));        MainEditBox->SetEditable(false);        MainFrame::setFilename("");    }}/// <summary>/// if filename variable is empty prompt the user to enter a name then add .doc to the end/// if there is already a name save under the name./// </summary>/// <param name="WXUNUSED"></param>void MainFrame::saveFile(wxCommandEvent& WXUNUSED(event)){    if (MainFrame::getFilename().empty()) {        MainFrame::setFilename(            wxGetTextFromUser("Enter Name of File.do not include file extension", " ", "enter here", NULL, wxDefaultCoord, wxDefaultCoord, true));        //MainFrame::appendFilename(".doc");        wxString xmlName= MainFrame::getFilename() + ".xml", docName= MainFrame::getFilename() + ".doc";            MainEditBox->SaveFile("PatientFileParse/"+MainFrame::getFilename()+".txt");            MainEditBox->SaveFile("PatientFileLoad/"+MainFrame::getFilename() + ".xml");            MainEditBox->SaveFile("PatientFileView/"+MainFrame::getFilename() + ".html");               }    else {        MainEditBox->SaveFile(MainFrame::getFilename() + ".txt");        MainEditBox->SaveFile(MainFrame::getFilename() + ".xml");    }   }/// <summary>///this method opens a dialog box that lets the user search thier file system and /// save a file with a custom name regardless of if there is filename saved./// </summary>/// <param name="WXUNUSED"></param>void MainFrame::saveFileAs(wxCommandEvent& WXUNUSED(event)){    //set up rich text buffer    wxFileDialog        saveFileDialog(this, _("Save Doc file"), "", "",            "xml files (*.xml)|*.xml", wxFD_SAVE | wxFD_OVERWRITE_PROMPT);    if (saveFileDialog.ShowModal() == wxID_CANCEL)        return;     // the user changed idea...    // save the current contents in the file;    // this can be done with e.g. wxWidgets output streams:    wxFileOutputStream output_stream(saveFileDialog.GetPath());    setFilename(saveFileDialog.GetFilename());    if (!output_stream.IsOk())    {        wxLogError("Cannot save current contents in file '%s'.", saveFileDialog.GetPath());        return;    }}/// <summary>/// the function adds a button to the buttonPanel. these are called dynamic buttons/// each button will need a lable and text, these are prompted from the user/// the button is added and the layout updated/// the buttons can perform several tasks, it could simply write a line of text, it could link to a seperate panel/// or it could bring up a dialog. /// </summary>/// <param name="WXUNUSED"></param>void MainFrame::AddButton(wxCommandEvent& event){    //ask user what type of button they want, text addes text to the document,link adds a link to a new panel   wxString selection = popUpHandeler->confirmIntentAddButton(this);        //promp user for name and text of text button   if (selection == "text output.") {       wxString buttonName =           wxGetTextFromUser("Enter text for button name", " ", "enter here", NULL, wxDefaultCoord, wxDefaultCoord, true);       wxString buttonText =           wxGetTextFromUser("Enter text for button to add", "", "enter here", NULL, wxDefaultCoord, wxDefaultCoord, true);       //adds the button       if (buttonName!=""||buttonText!="") {           currentButtonSet->getCurrentPanel()->addQLink(buttonName, buttonText);           int QIndex = currentButtonSet->getCurrentPanel()->getQLinkCount();           currentButtonSet->getCurrentPanel()->setQLinkCount(QIndex + 1);       }     //  int QIndex = currentButtonSet->getCurrentPanel()->getQLinkCount();       currentButtonSet->getCurrentPanel()->getQLinkList().back()->           Bind(wxEVT_RIGHT_DOWN, &MainFrame::onRightClick, this);      // int QIndex = currentButtonSet->getCurrentPanel()->getQLinkCount();       currentButtonSet->getCurrentPanel()->getQLinkList().back()->           Bind(wxEVT_BUTTON, &MainFrame::ButtonWrite, this);   }   else if (selection == "new page.") {       if (currentButtonSet->getCurrentPanel()->getLevel() >= 2) {           popUpHandeler->errorMessage("max panel depth reached");           return;       }       wxString ButtonName =           wxGetTextFromUser("Enter text for button name", " ", "enter here", NULL, wxDefaultCoord, wxDefaultCoord, true);       if (ButtonName != "" && currentButtonSet->getCurrentPanel()->getLevel() < 2) {           //gets the panel index and adds the new button, also the new panel that the button will link to.           int panelCount = currentButtonSet->getCurrentPanel()->getPanelCount();           std::string panelCountStr = std::to_string(panelCount);           currentButtonSet->getCurrentPanel()->addQLink(ButtonName, panelCountStr);                      currentButtonSet->getCurrentPanel()->addNewPanel(this, ButtonName, currentButtonSet->getPath());           //bind the editing function, and update the button index for the panel           int QIndex = currentButtonSet->getCurrentPanel()->getQLinkCount();           currentButtonSet->getCurrentPanel()->getQLinkList().at(QIndex)->               Bind(wxEVT_RIGHT_DOWN, &MainFrame::onRightClick, this);           currentButtonSet->getCurrentPanel()->getQLinkList().at(QIndex)->               Bind(wxEVT_BUTTON, &MainFrame::swapHelper, this);           currentButtonSet->getCurrentPanel()->setQLinkCount(QIndex + 1);                  }       else if (ButtonName == "") {           popUpHandeler->errorMessage("no name");       }          }   else if (selection == "popup.") {       if (DialogButtonHelper()) {           int QIndex = currentButtonSet->getCurrentPanel()->getQLinkCount();           currentButtonSet->getCurrentPanel()->setQLinkCount(QIndex + 1);           currentButtonSet->getCurrentPanel()->getQLinkList().at(QIndex)->               Bind(wxEVT_RIGHT_DOWN, &MainFrame::onRightClick, this);       }   }       }/// <summary>/////////////////////////////////////////////////// this function makes a button write its texr to the texteditor//// </summary>//////////////////////////////////////////////////// <param name="event"></param>void MainFrame::ButtonWrite(wxCommandEvent& event) {    wxButton* temp = (wxButton*)event.GetEventObject();    if(temp->GetName()!=""&&MainEditBox->IsEditable())        MainEditBox->WriteText(("\n" + temp->GetName() + "\n"));}/////////////////////////////end button write////////////////////// <summary>/// adds a Name, and date+time to the file, as a time stamp and signiture --fix function--/// </summary>/// <param name="WXUNUSED"></param>void MainFrame::Sign(wxCommandEvent& WXUNUSED(event)) {    if(!Signed)        MainEditBox->AppendText("\n" + currentButtonSet->getSetName() + "\n" + functionHelper->getDateToSign());    else if (Signed) {        //remove old signiture, and apply new one    }    }/// <summary>/// this function allows the user to make a right click on a button and offer them 2 choices edit lable or edit text/// </summary>/// <param name="event"></param>void MainFrame::onRightClick(wxMouseEvent& event) {    ButtonToEdit = (wxButton*)event.GetEventObject();    wxMenu menu;    std::string name =ButtonToEdit->GetName().ToStdString();    if (functionHelper->isNumber(name)) {        menu.Append(MENU_EditButtonName, "edit Name of button");                    }    else if (functionHelper->isPopup(name)) {        menu.Append(MENU_EditButtonName, "edit Name of button");        menu.Append(MENU_chanegDialog, "edit Popup of button");        menu.Append(MENU_RemoveButton, "remove button");    }    else  if (functionHelper->isText(name)) {        menu.Append(MENU_EditButtonName, "edit Name of button");        menu.Append(MENU_EditButtonText, "edit Text of button");        menu.Append(MENU_RemoveButton, "remove button");    }    PopupMenu(&menu);}/// <summary>/// this function interprites the command from onRightCLick, and processes it accoridingly /// </summary>/// <param name="event"></param>void MainFrame::onPopUpCLick(wxCommandEvent& event) {    wxString buttonName;    wxString buttonText;    switch (event.GetId()) {    case MENU_EditButtonName: {        //if the edit name option was chocsen then prompt the user for a new name, as long as it was not empty        //the new name will replace the old one        buttonName =            wxGetTextFromUser("Enter text for button name", " ", ButtonToEdit->GetLabel(), NULL, wxDefaultCoord, wxDefaultCoord, true);        if (!buttonName.IsEmpty()) {            MainFrame::setButtonToEditName(buttonName);        }        break;    }    case MENU_EditButtonText: {        //if the edit text option was chosen then the user will be probpted to enter a new text        //the text will be replaced with the new text        buttonText =            wxGetTextFromUser("Enter text for button Text", " ", ButtonToEdit->GetName(), NULL, wxDefaultCoord, wxDefaultCoord, true);        if (!buttonText.IsEmpty()) {            MainFrame::setButtonToEditText(buttonText);        }        break;    }            //make new case to remove button    case MENU_RemoveButton: {        std::vector<wxButton*> vect = currentButtonSet->getCurrentPanel()->getQLinkList();        int x = 0;        for (int i = 0; i != (int)vect.size(); i++) {            wxString buttonName = currentButtonSet->getCurrentPanel()->getQLinkList().at(i)->GetName();            if (buttonName == ButtonToEdit->GetName()) {                x = i;            }        }        vect.erase(vect.begin() + x);        int QIndex = currentButtonSet->getCurrentPanel()->getQLinkCount();        currentButtonSet->getCurrentPanel()->setQLinkCount(QIndex - 1);        MainFrame::removeButtonToEdit();        currentButtonSet->getCurrentPanel()->getGridSizer()->Layout();        Update();        // currentButtonSet->getCurrentPanel()->QlinkList        break;    }    case MENU_chanegDialog: {        wxString dialogChoice = popUpHandeler->SingleChoiceDialog("DialogInformation/DialogSelection.txt", "select a popup.");               PopupButtonRebind(dialogChoice.ToStdString(),ButtonToEdit);            break;    }    }}/// <summary>/// swapPanels takes in a ButtonPanel and makes it the active panel/// </summary>/// <param name="newPanel"></param>void MainFrame::swapPanels(ButtonPanel* newPanel) {    if (newPanel != currentButtonSet->getCurrentPanel()) {        //chance the navlinks based on the panel being swaped to        BuildNavLinks(newPanel);        //detach old panel and several control sizers        Mainsizer->Detach(Controls);        Mainsizer->Detach(currentButtonSet->getCurrentPanel());        Mainsizer->Detach(ButtonSetSizer);        //hide the current panel        currentButtonSet->getCurrentPanel()->Hide();        //set the new current panel        currentButtonSet->setCurrentPanel(newPanel);        // reattach all sizers and the new panel        Mainsizer->Prepend(currentButtonSet->getCurrentPanel(), 2, wxEXPAND);        Mainsizer->Prepend(Controls, 0, wxEXPAND);        Mainsizer->Prepend(ButtonSetSizer, 0, wxALIGN_CENTER);        currentButtonSet->getCurrentPanel()->Show();        Mainsizer->Layout();        Update();    }}/// <summary>/// swapHelper gets the index of the panel to swap to and passes the new panel to swapPanels/// </summary>/// <param name="event"></param>void MainFrame::swapHelper(wxCommandEvent& event){//gets the current event object being a button, the button has an index relating the the assosidated panel wxButton* btton = (wxButton*)event.GetEventObject();//get the index and turn it to an integerwxString ButtonName = btton->GetName();int PanelIndexToSwapTo = wxAtoi(ButtonName.ToStdString());// gets the panel and swaps to itswapPanels(currentButtonSet->getCurrentPanel()->getPanelAtIndex(PanelIndexToSwapTo));}void MainFrame::startSwapHelper(wxCommandEvent& event) {    //gets the current event object being a button, the button has an index relating the the assosidated panel     wxButton* btton = (wxButton*)event.GetEventObject();    //get the index and turn it to an integer    wxString ButtonName = btton->GetName();    int PanelIndexToSwapTo = wxAtoi(ButtonName.ToStdString());    // gets the panel and swaps to it    swapPanels(currentButtonSet->getPanelAt(PanelIndexToSwapTo));}/// <summary>/// using a wxChoice control, the user can change what button set they are using ----- needs work ----/// </summary>/// <param name="evt"></param>void MainFrame::SwapButtonSet(wxCommandEvent& evt){    //get the new selection in the wxChoice field and uses it to get the index to use    wxChoice* choi = (wxChoice*)evt.GetEventObject();    int setIndex = choi->GetSelection();    // if the Buttonset in question's files exist and it is not the current buttonset then destroy the old panels set the new     //current buttonset and load its panels and buttons    if (functionHelper->DoseUserExist(ButtonSetNames[setIndex]) && currentButtonSet->getSetName() != ButtonSetNames[setIndex]) {        //remove the panels from the current set        destroyPanels(currentButtonSet->getSetName());        //chance the current set        currentButtonSet = ButtonSetList.at(setIndex);        //load panels for the new current set        currentButtonSet->loadPanelsAndButtons(currentButtonSet->getSetName());        //detach several sizers and reattach them to update the layout properly        Mainsizer->Detach(ButtonSetSizer);        Mainsizer->Detach(Controls);        Mainsizer->Detach(currentButtonSet->getCurrentPanel());        Mainsizer->Prepend(currentButtonSet->getCurrentPanel(), 2, wxEXPAND);        Mainsizer->Prepend(Controls, 0, wxALIGN_CENTER);        Mainsizer->Prepend(ButtonSetSizer, 0, wxALIGN_CENTER);        Mainsizer->Layout();    }    else if (!functionHelper->DoseUserExist(ButtonSetNames[setIndex])) {// if the set dose not exist or if we selected the same user        popUpHandeler->errorMessage("set dose not exist");    }    else if (currentButtonSet->getSetName() == ButtonSetNames[setIndex]) {        popUpHandeler->errorMessage("this is the same user");    }}/// <summary>/// //systematicly destroy all panels and buttons for a given set. ---consider moving this to the buttonset class/// </summary>/// <param name="set"></param>void MainFrame::destroyPanels(wxString set) {    for (int i = 0; i < currentButtonSet->getPanelListSize(); i++) {        Mainsizer->Detach(currentButtonSet->getPanelAtIndex(i));        currentButtonSet->getPanelAtIndex(i)->~ButtonPanel();        Mainsizer->Layout();        Update();    }    currentButtonSet->clearPanelList();}void MainFrame::newSet(wxCommandEvent& event) {    //props the user for a name for the new button set, then adds the new set to the set list    //opens an ofstream and writes a new file for the button set    if (SetCount <= 9) {        wxString setName =            wxGetTextFromUser("Please enter name of new set", " ", "enter here", NULL, wxDefaultCoord, wxDefaultCoord, true);        ButtonSetNames[SetCount] = setName;        //create the filename and pathname for the new users information        std::string filename = "panelLayout/panelLayout" + setName.ToStdString() + ".txt";        std::string pathname = "panelLayout/panelLayout" + setName.ToStdString();        //create the new set        ButtonSetList.push_back(new ButtonSet(this, setName.ToStdString(), SetCount, pathname, 4));        //store the information for the set, in directories with text files        ofstream newSetStream(filename);        int check = mkdir(pathname.c_str());        for (int i = 0; i < 4; i++) {            std::string buttonfilename = pathname + "/layout" + (std::to_string(i + 1)) + ".txt";            ofstream basicFileStream(buttonfilename);            std::string buttonPathname = pathname + "/layout" + (std::to_string(i + 1)) + "-panels";            int check = mkdir(buttonPathname.c_str());            for (int j = 0; j < 7; j++) {                buttonfilename = buttonPathname + "/LayoutLevel2-" + (std::to_string(j + 1)) + ".txt";                ofstream basicFileStream(buttonfilename);                std::string LvL2ButtonPathname = buttonPathname + "/LayoutLevel2-" + (std::to_string(j + 1)) + "-panels";                int check = mkdir(LvL2ButtonPathname.c_str());                for (int k = 0; k < 7; k++) {                    std::string LvL3Buttonfilename = LvL2ButtonPathname + "/LayoutLevel3-" + (std::to_string(k + 1)) + ".txt";                    ofstream basicFileStream(LvL3Buttonfilename);                }            }        }        //set the set selection control        size_t size = sizeof(ButtonSetNames) / sizeof(ButtonSetNames[0]);        userSelection->Clear();        for (size_t i = 0; i < size; i++) {            if (ButtonSetNames[i] != wxT("")) {                userSelection->Append(ButtonSetNames[i]);            }        }        //sets the original set as the first and saves basic set information        userSelection->SetSelection(0);        for (int i = 0; i < 4; i++) {            newSetStream << "button-List" + std::to_string(i + 1);            newSetStream << "\n";            newSetStream << (pathname + "/layout" + std::to_string(i + 1) + ".txt");            newSetStream << "\n";        }        SetCount++;    }}/// <summary>/// saves the panels and buttons for the current button set/// </summary>/// <param name="event"></param>void MainFrame::SavePanelsAndButtons(wxCommandEvent & event) {    currentButtonSet->SavePanelsAndButtonsNP();    saveButtonSetInfo("SetInfoAll.txt");}void MainFrame::saveButtonSetInfo(std::string path) {    //work on this one    setInfoOut.open(path,std::ofstream::out|std::ofstream::trunc);    if (setInfoOut.good()) {    }    if (!setInfoOut.fail()) {        for (size_t i = 0; i < ButtonSetList.size(); i++) {            setInfoOut << ButtonSetList.at(i)->getSetName().ToStdString();            setInfoOut << "\n";            setInfoOut << ButtonSetList.at(i)->getPanelCount();            setInfoOut << "\n";            setInfoOut << ButtonSetList.at(i)->getPath();            setInfoOut << "\n";        }    }}/// <summary>/// loads the information for defined button sets/// </summary>/// <param name="path"></param>void MainFrame::loadButtonSetInfo(std::string path) {    std::string filepath = path;    setInfoIn.open(filepath);    std::string setNo;    std::string setName;    std::string setPath;    //int i = 0;    while (setInfoIn.peek() != EOF) {        getline(setInfoIn, setName);        getline(setInfoIn, setNo);        getline(setInfoIn, setPath);        int SetNo = std::stoi(setNo);        ButtonSetNames[SetCount] = setName;        ButtonSetList.push_back(new ButtonSet(this, setName, SetCount, setPath, SetNo));        SetCount++;    }    currentButtonSet = ButtonSetList.at(0);}/// <summary>/// allows the Navlinks to swap panels to thier stores panel /// </summary>/// <param name="evt"></param>void MainFrame::LinkNavigation(wxHyperlinkEvent& evt) {    NavLink* tempLink = (NavLink*)evt.GetEventObject();    swapPanels(tempLink->getPanel());}/// <summary>/// builds the navlinks based on the currentpanel and how many previous elements thier are/// </summary>/// <param name="panelToWork"></param>void MainFrame::BuildNavLinks(ButtonPanel* panelToWork){    switch (panelToWork->getLevel()) {    case 0:         if (Link1 == nullptr) {            Link1 = new NavLink(Links, LINK_NAVIGATE, panelToWork->GetName(), panelToWork);        }        else {            Link1->setName(panelToWork->GetName());            Link1->setPanel(panelToWork);        }        if (Link2 != nullptr) {            Link2->Hide();            Link2 = nullptr;        }        if (Link3 != nullptr) {            Link3->Hide();            Link3 = nullptr;        }        Links->clearLinkSizer();        //LinkSizer->Clear();        Link1->Hide();        Links->addToLinkSizer(Link1);        //LinkSizer->Add(Link1);        Link1->Show();        Links->linkLayout();        //LinkSizer->Layout();        Update();        break;    case 1:        if (Link2 == nullptr) {            Link2 = new NavLink(Links, LINK_NAVIGATE, panelToWork->GetName(), panelToWork);        }        else {            Link2->setName(panelToWork->GetName());            Link2->setPanel(panelToWork);        }        Links->clearLinkSizer();        Link1->Hide();        Link2->Hide();        Links->addToLinkSizer(Link1);        Links->linklAddSpace(10, 10);        Links->addToLinkSizer(Link2);        Link1->Show();        Link2->Show();        Links->linkLayout();        Update();        break;    case 2:        if (Link3 == nullptr) {            Link3 = new NavLink(Links, LINK_NAVIGATE, panelToWork->GetName(), panelToWork);        }        else {            Link3->setName(panelToWork->GetName());            Link3->setPanel(panelToWork);        }        Links->clearLinkSizer();        Link1->Hide();        Link2->Hide();        Link3->Hide();        Links->addToLinkSizer(Link1);        Links->linklAddSpace(10, 10);        Links->addToLinkSizer(Link2);        Links->linklAddSpace(10, 10);        Links->addToLinkSizer(Link3);        Link1->Show();        Link2->Show();        Link3->Show();        Links->linkLayout();        Update();        break;    }}void MainFrame::BindAllButtons(){    for (size_t k = 0; k < ButtonSetList.size(); k++) {        for (size_t j = 0; j < ButtonSetList.at(k)->getPanelList().size(); j++) {            ButtonPanel* tempPanel = ButtonSetList.at(k)->getPanelList().at(j);            for (size_t i = 0; i < tempPanel->getQLinkList().size(); i++) {                tempPanel->getQLinkList().at(i)->Bind(wxEVT_RIGHT_DOWN, &MainFrame::onRightClick, this);                if (tempPanel->getQLinkList().at(i)->GetId() == BUTTON_Panel) {                    tempPanel->getQLinkList().at(i)->Bind(wxEVT_BUTTON, &MainFrame::swapHelper, this);                }            }        }    }}void MainFrame::unbindPopupButton(wxString str, wxButton* btton) {    wxButton* button = btton;    if (str == "Chief complaint E&M") {                button->Unbind(wxEVT_BUTTON, &MainFrame::ChiefEandM, this);    }    if (str == "Next complaint E&M") {                button->Unbind(wxEVT_BUTTON, &MainFrame::NextEandM, this);    }    if (str == "Past History") {        button->Unbind(wxEVT_BUTTON, &MainFrame::pastHealthHistory, this);    }    if (str == "Diet & Nutrition") {        button->Unbind(wxEVT_BUTTON, &MainFrame::DietNutrition, this);    }    if (str == "Rate of Improvement") {        button->Unbind(wxEVT_BUTTON, &MainFrame::rateofImprove, this);    }    if (str == "Social habits") {        button->Unbind(wxEVT_BUTTON, &MainFrame::socialhabits, this);    }    if (str == "Freqency of pain") {        button->Unbind(wxEVT_BUTTON, &MainFrame::FreqofPain, this);    }    if (str == "Allergies") {        button->Unbind(wxEVT_BUTTON, &MainFrame::Allergies, this);    }    if (str == "Surgical history") {        button->Unbind(wxEVT_BUTTON, &MainFrame::surgicalHistory, this);    }}void MainFrame::PopupButtonRebind(std::string str,wxButton* btton) {    wxButton* button = btton;    button->GetName();    unbindPopupButton(button->GetName(),button);    if (str == "Chief complaint E&M") {        button->SetLabel("chief E&M");        button->Bind(wxEVT_BUTTON, &MainFrame::ChiefEandM, this);    }    if (str == "Next complaint E&M") {        button->SetLabel("Next E&M");        button->Bind(wxEVT_BUTTON, &MainFrame::NextEandM, this);    }    if (str == "Past History") {        button->SetLabel("Helth History");        button->Bind(wxEVT_BUTTON, &MainFrame::pastHealthHistory, this);    }    button->SetLabel("chief E&M");    if (str == "Diet & Nutrition") {        button->SetLabel("Nutrition");        button->Bind(wxEVT_BUTTON, &MainFrame::DietNutrition, this);    }    if (str == "Rate of Improvement") {        button->SetLabel("Improvement");        button->Bind(wxEVT_BUTTON, &MainFrame::rateofImprove, this);    }    if (str == "Social habits") {        button->SetLabel("Social Habits");        button->Bind(wxEVT_BUTTON, &MainFrame::socialhabits, this);    }    if (str == "Freqency of pain") {        button->SetLabel("pain Freq");        button->Bind(wxEVT_BUTTON, &MainFrame::FreqofPain, this);    }    if (str == "Allergies") {        button->SetLabel("Allergies");        button->Bind(wxEVT_BUTTON, &MainFrame::Allergies, this);    }    if (str == "Surgical history") {        button->SetLabel("Surgical history");        button->Bind(wxEVT_BUTTON, &MainFrame::surgicalHistory, this);    }    if (str == "Specific Muscles") {        button->SetLabel("Specific Muscles");        button->Bind(wxEVT_BUTTON, &MainFrame::SpecificMuscles, this);    }    if (str == "Side") {        button->SetLabel("Side");        button->Bind(wxEVT_BUTTON, &MainFrame::Side, this);    }    if (str == "Restrictions") {        button->SetLabel("Restrictions");        button->Bind(wxEVT_BUTTON, &MainFrame::Restrictions, this);    }    if (str == "Work") {        button->SetLabel("Work");        button->Bind(wxEVT_BUTTON, &MainFrame::Work, this);    }    if (str == "Spine") {        button->SetLabel("Spine");        button->Bind(wxEVT_BUTTON, &MainFrame::spineDialog, this);    }    if (str == "Contraindiction") {        button->SetLabel("Contraindiction");        button->Bind(wxEVT_BUTTON, &MainFrame::contraindiction, this);    }    if (str == "Family History") {        button->SetLabel("Family History");        button->Bind(wxEVT_BUTTON, &MainFrame::familyHistory, this);    }    if (str == "Body") {        button->SetLabel("Body");        button->Bind(wxEVT_BUTTON, &MainFrame::Body, this);    }    if (str == "Cervical Adjustment") {        button->SetLabel("Cervical Adjustment");        button->Bind(wxEVT_BUTTON, &MainFrame::Cervicaladjustment, this);    }    if (str == "Compicating Factors") {        button->SetLabel("Compicating Factors");        button->Bind(wxEVT_BUTTON, &MainFrame::CompicatingFactors, this);    }    if (str == "Dificulty Performing") {        button->SetLabel("Dificulty Performing");        button->Bind(wxEVT_BUTTON, &MainFrame::DificultyPerforming, this);    }    if (str == "Drugs Medication") {        button->SetLabel("Drugs Medication");        button->Bind(wxEVT_BUTTON, &MainFrame::DrugsMedication, this);    }}bool MainFrame::DialogButtonHelper() {    wxString dialogChoice = popUpHandeler->SingleChoiceDialog("DialogInformation/DialogSelection.txt", "select a popup.");    if (dialogChoice == "Chief complaint E&M"){        currentButtonSet->getCurrentPanel()->addQLink("Chief E&M","Dialog-ID-ChiefEM");        currentButtonSet->getCurrentPanel()->getQLinkList().back()->Bind(wxEVT_BUTTON, &MainFrame::ChiefEandM, this);        return true;    }    if (dialogChoice == "Next complaint E&M") {        currentButtonSet->getCurrentPanel()->addQLink("Next E&M", "Dialog-ID-NextEM");        currentButtonSet->getCurrentPanel()->getQLinkList().back()->Bind(wxEVT_BUTTON, &MainFrame::NextEandM, this);        return true;    }    if (dialogChoice == "Past History") {        currentButtonSet->getCurrentPanel()->addQLink("Health History", "Dialog-ID-PastHistory");        currentButtonSet->getCurrentPanel()->getQLinkList().back()->Bind(wxEVT_BUTTON, &MainFrame::pastHealthHistory, this);        return true;    }        if (dialogChoice == "Diet & Nutrition") {        currentButtonSet->getCurrentPanel()->addQLink("Nutrition", "Dialog-ID-Nutrition");        currentButtonSet->getCurrentPanel()->getQLinkList().back()->Bind(wxEVT_BUTTON, &MainFrame::DietNutrition, this);        return true;    }    if (dialogChoice == "Rate of Improvement") {        currentButtonSet->getCurrentPanel()->addQLink("Improve/decline", "Dialog-ID-Improve");        currentButtonSet->getCurrentPanel()->getQLinkList().back()->Bind(wxEVT_BUTTON, &MainFrame::rateofImprove, this);        return true;    }    if (dialogChoice == "Social habits") {        currentButtonSet->getCurrentPanel()->addQLink("Social habits", "Dialog-ID-Social");        currentButtonSet->getCurrentPanel()->getQLinkList().back()->Bind(wxEVT_BUTTON, &MainFrame::socialhabits, this);        return true;    }        if (dialogChoice == "Freqency of pain") {        currentButtonSet->getCurrentPanel()->addQLink("Pain Freq", "Dialog-ID-Pain");        currentButtonSet->getCurrentPanel()->getQLinkList().back()->Bind(wxEVT_BUTTON, &MainFrame::FreqofPain, this);        return true;    }    if (dialogChoice == "Allergies") {        currentButtonSet->getCurrentPanel()->addQLink("Allergies", "Dialog-ID-Allergies");        currentButtonSet->getCurrentPanel()->getQLinkList().back()->Bind(wxEVT_BUTTON, &MainFrame::Allergies, this);        return true;    }    if (dialogChoice == "Surgical history") {        currentButtonSet->getCurrentPanel()->addQLink("Surgical", "Dialog-ID-Surgical");        currentButtonSet->getCurrentPanel()->getQLinkList().back()->Bind(wxEVT_BUTTON, &MainFrame::surgicalHistory, this);        return true;    }    if (dialogChoice == "Specific Muscles") {        currentButtonSet->getCurrentPanel()->addQLink("Specific Muscles", "Dialog-ID-Muscle");        currentButtonSet->getCurrentPanel()->getQLinkList().back()->Bind(wxEVT_BUTTON, &MainFrame::SpecificMuscles, this);        return true;    }    if (dialogChoice == "Restrictions") {        currentButtonSet->getCurrentPanel()->addQLink("Restrictions", "Dialog-ID-Restrictions");        currentButtonSet->getCurrentPanel()->getQLinkList().back()->Bind(wxEVT_BUTTON, &MainFrame::Restrictions, this);        return true;    }    if (dialogChoice == "Side") {        currentButtonSet->getCurrentPanel()->addQLink("Side", "Dialog-ID-Side");        currentButtonSet->getCurrentPanel()->getQLinkList().back()->Bind(wxEVT_BUTTON, &MainFrame::Side, this);        return true;    }    if (dialogChoice == "Work") {        currentButtonSet->getCurrentPanel()->addQLink("Work", "Dialog-ID-Work");        currentButtonSet->getCurrentPanel()->getQLinkList().back()->Bind(wxEVT_BUTTON, &MainFrame::Work, this);        return true;    }    if (dialogChoice == "Spine") {        currentButtonSet->getCurrentPanel()->addQLink("Spine", "Dialog-ID-Spine");        currentButtonSet->getCurrentPanel()->getQLinkList().back()->Bind(wxEVT_BUTTON, &MainFrame::spineDialog, this);        return true;    }    if (dialogChoice == "Contraindiction") {        currentButtonSet->getCurrentPanel()->addQLink("Contraindiction", "Dialog-ID-Contraindiction");        currentButtonSet->getCurrentPanel()->getQLinkList().back()->Bind(wxEVT_BUTTON, &MainFrame::contraindiction, this);        return true;    }    if (dialogChoice == "Family History") {        currentButtonSet->getCurrentPanel()->addQLink("Family History", "Dialog-ID-Family-History");        currentButtonSet->getCurrentPanel()->getQLinkList().back()->Bind(wxEVT_BUTTON, &MainFrame::familyHistory, this);        return true;    }    if (dialogChoice == "Body") {        currentButtonSet->getCurrentPanel()->addQLink("Body", "Dialog-ID-Body");        currentButtonSet->getCurrentPanel()->getQLinkList().back()->Bind(wxEVT_BUTTON, &MainFrame::Body, this);        return true;    }    if (dialogChoice == "Cervical adjustment") {        currentButtonSet->getCurrentPanel()->addQLink("Cervical Adjustment", "Dialog-ID-Cervical-adjustment");        currentButtonSet->getCurrentPanel()->getQLinkList().back()->Bind(wxEVT_BUTTON, &MainFrame::Cervicaladjustment, this);        return true;    }    if (dialogChoice == "Compicating Factors") {        currentButtonSet->getCurrentPanel()->addQLink("Compicating Factors", "Dialog-ID-Compicating-Factors");        currentButtonSet->getCurrentPanel()->getQLinkList().back()->Bind(wxEVT_BUTTON, &MainFrame::CompicatingFactors, this);        return true;    }    if (dialogChoice == "Dificulty Performing") {        currentButtonSet->getCurrentPanel()->addQLink("Dificulty Performing", "Dialog-ID-Dificulty-Performing");        currentButtonSet->getCurrentPanel()->getQLinkList().back()->Bind(wxEVT_BUTTON, &MainFrame::DificultyPerforming, this);        return true;    }    if (dialogChoice == "Drugs Medication") {        currentButtonSet->getCurrentPanel()->addQLink("Drugs Medication", "Dialog-ID-Drugs-Medication");        currentButtonSet->getCurrentPanel()->getQLinkList().back()->Bind(wxEVT_BUTTON, &MainFrame::DrugsMedication, this);        return true;    }    return false;    }void MainFrame::DialofURLHelper(wxTextUrlEvent& evt) {        wxString dialogChoice = popUpHandeler->SingleChoiceDialog("DialogInformation/DialogSelection-2.txt", "select a popup.");        wxString result;        if (dialogChoice == "Diet & Nutrition") {           result = popUpHandeler->MultipleChoiceDialog("DialogInformation/DietNutrition.txt", "Restrictions?");        }        if (dialogChoice == "Rate of Improvement") {            result = popUpHandeler->MultipleChoiceDialog("DialogInformation/rateofImprove.txt", "Restrictions?");        }        if (dialogChoice == "Social habits") {            result = popUpHandeler->MultipleChoiceDialog("DialogInformation/socialhabits.txt", "Restrictions?");        }        if (dialogChoice == "Freqency of pain") {            result = popUpHandeler->MultipleChoiceDialog("DialogInformation/FreqOfPain.txt", "Restrictions?");        }        if (dialogChoice == "Allergies") {            result = popUpHandeler->MultipleChoiceDialog("DialogInformation/Allergies.txt", "Restrictions?");        }        if (dialogChoice == "Surgical history") {            result = popUpHandeler->MultipleChoiceDialog("DialogInformation/surgicalHistory.txt", "Restrictions?");        }        if (dialogChoice == "Specific Muscles") {            result = popUpHandeler->MultipleChoiceDialog("DialogInformation/SpecificMuseles.txt", "Restrictions?");        }        if (dialogChoice == "Restrictions") {            result = popUpHandeler->MultipleChoiceDialog("DialogInformation/restrictions.txt", "Restrictions?");        }        if (dialogChoice == "Side") {            result = popUpHandeler->MultipleChoiceDialog("DialogInformation/side.txt", "Restrictions?");        }        if (dialogChoice == "Work") {            result = popUpHandeler->MultipleChoiceDialog("DialogInformation/work.txt", "Restrictions?");        }        if (dialogChoice == "Spine") {            result = popUpHandeler->MultipleChoiceDialog("DialogInformation/spineSegmentsL-R.txt", "Restrictions?");        }        if (dialogChoice == "Body") {            result = popUpHandeler->bodyDialog("Select a location(s)");        }        if (dialogChoice == "Contraindiction") {            result = popUpHandeler->MultipleChoiceDialog("DialogInformation/contraindication.txt", "Restrictions?");        }        if (dialogChoice == "family History") {            result = popUpHandeler->MultipleChoiceDialog("DialogInformation/familyHistory.txt", "Restrictions?");        }        int urlS = evt.GetURLStart();        int urlE = evt.GetURLEnd() + 1;        MainEditBox->Remove(urlS, urlE);        MainEditBox->WriteText(result);    }void MainFrame::ChiefEandM(wxCommandEvent& WXUNUSED(event)) {    wxString area, date, injury, freq, quality, vas, radiate, allergies, prevEpp, goals, locations, change;    locations = popUpHandeler->bodyDialog("what is the cheif complaint?");    date = popUpHandeler->Calender();    injury = popUpHandeler->SingleChoiceDialog("DialogInformation/Injury.txt", "Mechanism of injury or condition.");    freq = popUpHandeler->SingleChoiceDialog("DialogInformation/FreqOfPain.txt", "Frequency of pain?");    quality = popUpHandeler->MultipleChoiceDialog("DialogInformation/QualityOfDiscomfort.txt", "What are the quality of the pain?");    radiate = popUpHandeler->bodyDialog("if the discomfort radiates, were dose it travle to?");    change = popUpHandeler->SingleChoiceDialog("DialogInformation/BetterorWorse.txt", "how has the pain changed?");    vas = popUpHandeler->SingleChoiceDialog("DialogInformation/VAS.txt", "What is the VAS?");    //modifying factors    //previos episodes    //previos care    //recent tests    goals = popUpHandeler->MultipleChoiceDialog("DialogInformation/goals.txt", "Patient Goals?");    MainEditBox->BeginBold();    MainEditBox->WriteText("HISTORY: \n");    MainEditBox->WriteText("Chief Complaint: ");    MainEditBox->EndBold();    MainEditBox->BeginTextColour(wxColour(52, 128, 235));    MainEditBox->BeginURL(locations);    MainEditBox->WriteText(locations);    MainEditBox->EndURL();    MainEditBox->EndTextColour();    MainEditBox->WriteText("\tcomplaint since ");    MainEditBox->BeginTextColour(wxColour(52, 128, 235));    MainEditBox->BeginURL(date);    MainEditBox->WriteText(date);    MainEditBox->EndURL();    MainEditBox->EndTextColour();    MainEditBox->BeginBold();    MainEditBox->WriteText("\n\t-Mechanism of injury: ");    MainEditBox->EndBold();    MainEditBox->BeginTextColour(wxColour(52, 128, 235));    MainEditBox->BeginURL(injury);    MainEditBox->WriteText(injury);    MainEditBox->EndURL();    MainEditBox->EndTextColour();    MainEditBox->BeginBold();    MainEditBox->WriteText("\n\t-Frequency/Quality: ");    MainEditBox->EndBold();    MainEditBox->WriteText("experiences pain and discomfort ");    MainEditBox->BeginTextColour(wxColour(52, 128, 235));    MainEditBox->BeginURL(freq);    MainEditBox->WriteText(freq);    MainEditBox->EndURL();    MainEditBox->EndTextColour();    MainEditBox->WriteText(" of the time and is discribed as");    MainEditBox->BeginTextColour(wxColour(52, 128, 235));    MainEditBox->BeginURL(quality);    MainEditBox->WriteText(quality);    MainEditBox->EndURL();    MainEditBox->EndTextColour();    MainEditBox->BeginBold();    MainEditBox->WriteText("\n\t-Radiation of symptoms: ");    MainEditBox->EndBold();    MainEditBox->BeginTextColour(wxColour(52, 128, 235));    MainEditBox->BeginURL(radiate);    MainEditBox->WriteText(radiate);    MainEditBox->EndURL();    MainEditBox->EndTextColour();    MainEditBox->BeginBold();    MainEditBox->WriteText("\n\t-Change in Complaint: ");    MainEditBox->EndBold();    MainEditBox->WriteText("Complaint has ");    MainEditBox->BeginTextColour(wxColour(52, 128, 235));    MainEditBox->BeginURL(change);    MainEditBox->WriteText(change);    MainEditBox->EndURL();    MainEditBox->EndTextColour();    MainEditBox->WriteText("since the onset and the pain scale is currently rated at ");    MainEditBox->BeginTextColour(wxColour(52, 128, 235));    MainEditBox->BeginURL(vas);    MainEditBox->WriteText(vas);    MainEditBox->EndURL();    MainEditBox->EndTextColour();    MainEditBox->WriteText("(10/10 being the most severe)");    MainEditBox->BeginBold();    MainEditBox->WriteText("\n-\tModifying Factors: ");    MainEditBox->EndBold();    MainEditBox->WriteText("Relived by ");    MainEditBox->BeginTextColour(wxColour(239, 51, 10));    MainEditBox->WriteText("placeholder");    MainEditBox->EndTextColour();    MainEditBox->WriteText("and aggravated by ");    MainEditBox->BeginTextColour(wxColour(239, 51, 10));    MainEditBox->WriteText("placeholder");    MainEditBox->EndTextColour();    MainEditBox->BeginBold();    MainEditBox->WriteText("\n\t-Previous Episodes: ");    MainEditBox->EndBold();    MainEditBox->BeginTextColour(wxColour(239, 51, 10));    MainEditBox->WriteText("placeholder");    MainEditBox->EndTextColour();    MainEditBox->WriteText("past episodes.");    MainEditBox->BeginBold();    MainEditBox->WriteText("\n\t-Previos Care: ");    MainEditBox->EndBold();    MainEditBox->BeginTextColour(wxColour(239, 51, 10));    MainEditBox->WriteText("placeholder");    MainEditBox->EndTextColour();    MainEditBox->BeginBold();    MainEditBox->WriteText("\n\t-Recent diagnostic tests: ");    MainEditBox->EndBold();    MainEditBox->BeginTextColour(wxColour(239, 51, 10));    MainEditBox->WriteText("placeholder");    MainEditBox->EndTextColour();    MainEditBox->BeginBold();    MainEditBox->WriteText("\n\t-Patient subjective goal(s): ");    MainEditBox->EndBold();    MainEditBox->WriteText("Explains personal goal for staring treatment");    MainEditBox->BeginTextColour(wxColour(52, 128, 235));    MainEditBox->BeginURL(goals);    MainEditBox->WriteText(goals);    MainEditBox->EndURL();    MainEditBox->EndTextColour();    MainEditBox->BeginTextColour(wxColour(52, 128, 235));    MainEditBox->WriteText("\n--------------------------------------");    MainEditBox->EndTextColour();}void MainFrame::NextEandM(wxCommandEvent& WXUNUSED(event)) {    wxString injury, freq, quality, vas, radiate, change, locations, date;    locations = popUpHandeler->bodyDialog("what is the cheif complaint?");    date = popUpHandeler->Calender();    injury = popUpHandeler->SingleChoiceDialog("DialogInformation/Injury.txt", "Mechanism of injury or condition.");    freq = popUpHandeler->SingleChoiceDialog("DialogInformation/FreqOfPain.txt", "Frequency of pain?");    quality = popUpHandeler->MultipleChoiceDialog("DialogInformation/QualityOfDiscomfort.txt", "What are the quality of the pain?");    radiate = popUpHandeler->bodyDialog("if the discomfort radiates, were dose it travle to?");    change = popUpHandeler->SingleChoiceDialog("DialogInformation/BetterorWorse.txt", "how has the pain changed?");    vas = popUpHandeler->SingleChoiceDialog("DialogInformation/VAS.txt", "What is the VAS?");    //modifying factors    MainEditBox->WriteText("Patient also complains of: ");    MainEditBox->BeginTextColour(wxColour(52, 128, 235));    MainEditBox->BeginURL(locations);    MainEditBox->WriteText(locations);    MainEditBox->EndURL();    MainEditBox->EndTextColour();    MainEditBox->WriteText("\tcomplaint since ");    MainEditBox->BeginTextColour(wxColour(52, 128, 235));    MainEditBox->BeginURL(date);    MainEditBox->WriteText(date);    MainEditBox->EndURL();    MainEditBox->EndTextColour();    MainEditBox->BeginBold();    MainEditBox->WriteText("\n\t-Mechanism of injury: ");    MainEditBox->EndBold();    MainEditBox->BeginTextColour(wxColour(52, 128, 235));    MainEditBox->BeginURL(injury);    MainEditBox->WriteText(injury);    MainEditBox->EndURL();    MainEditBox->EndTextColour();    MainEditBox->BeginBold();    MainEditBox->WriteText("\n\t-Frequency/Quality: ");    MainEditBox->EndBold();    MainEditBox->WriteText("experiences pain and discomfort ");    MainEditBox->BeginTextColour(wxColour(52, 128, 235));    MainEditBox->BeginURL(freq);    MainEditBox->WriteText(freq);    MainEditBox->EndURL();    MainEditBox->EndTextColour();    MainEditBox->WriteText(" of the time and is discribed as");    MainEditBox->BeginTextColour(wxColour(52, 128, 235));    MainEditBox->BeginURL(quality);    MainEditBox->WriteText(quality);    MainEditBox->EndURL();    MainEditBox->EndTextColour();    MainEditBox->BeginBold();    MainEditBox->WriteText("\n\t-Radiation of symptoms: ");    MainEditBox->EndBold();    MainEditBox->BeginTextColour(wxColour(52, 128, 235));    MainEditBox->BeginURL(radiate);    MainEditBox->WriteText(radiate);    MainEditBox->EndURL();    MainEditBox->EndTextColour();    MainEditBox->BeginBold();    MainEditBox->WriteText("\n\t-Change in Complaint: ");    MainEditBox->EndBold();    MainEditBox->WriteText("Complaint has ");    MainEditBox->BeginTextColour(wxColour(52, 128, 235));    MainEditBox->BeginURL(change);    MainEditBox->WriteText(change);    MainEditBox->EndURL();    MainEditBox->EndTextColour();    MainEditBox->WriteText("since the onset and the pain scale is currently rated at ");    MainEditBox->BeginTextColour(wxColour(52, 128, 235));    MainEditBox->BeginURL(vas);    MainEditBox->WriteText(vas);    MainEditBox->EndURL();    MainEditBox->EndTextColour();    MainEditBox->WriteText("(10/10 being the most severe)");    MainEditBox->BeginBold();    MainEditBox->WriteText("\n-\tModifying Factors: ");    MainEditBox->EndBold();    MainEditBox->WriteText("Relived by ");    MainEditBox->BeginTextColour(wxColour(239, 51, 10));    MainEditBox->WriteText("placeholder");    MainEditBox->EndTextColour();    MainEditBox->WriteText("and aggravated by ");    MainEditBox->BeginTextColour(wxColour(239, 51, 10));    MainEditBox->WriteText("placeholder");    MainEditBox->EndTextColour();}void MainFrame::pastHealthHistory(wxCommandEvent& WXUNUSED(event)) {    wxString Allergies, Surgeries, Meds;    Allergies = popUpHandeler->MultipleChoiceDialog("DialogInformation/Allergies.txt", "what allergies are present?");    Surgeries = popUpHandeler->MultipleChoiceDialog("DialogInformation/surgicalHistory.txt", "what Surgeries have been done?");    Meds = popUpHandeler->MultipleChoiceDialog("DialogInformation/drugsMedication.txt", "what medications is the patient taking?");    //Illness = popUpHandeler->MultipleChoiceDialog("DialogInformation/Allergies.txt", "what allergies are present");    //Accidents    MainEditBox->BeginBold();    MainEditBox->WriteText("Past, Family and Social History");    MainEditBox->WriteText("\n\t-Past Health History:");    MainEditBox->WriteText("\n\t\t Allergies/Sensitivities:");    MainEditBox->EndBold();    MainEditBox->BeginTextColour(wxColour(52, 128, 235));    MainEditBox->BeginURL(Allergies);    MainEditBox->WriteText(Allergies);    MainEditBox->EndURL();    MainEditBox->EndTextColour();    MainEditBox->BeginBold();    MainEditBox->WriteText("\n\t\t Surgeries:");    MainEditBox->EndBold();    MainEditBox->BeginTextColour(wxColour(52, 128, 235));    MainEditBox->BeginURL(Surgeries);    MainEditBox->WriteText(Surgeries);    MainEditBox->EndURL();    MainEditBox->EndTextColour();    MainEditBox->BeginBold();    MainEditBox->WriteText("\n\t\t Medications:");    MainEditBox->EndBold();    MainEditBox->BeginTextColour(wxColour(52, 128, 235));    MainEditBox->BeginURL(Meds);    MainEditBox->WriteText(Meds);    MainEditBox->EndURL();    MainEditBox->EndTextColour();    MainEditBox->BeginBold();    MainEditBox->WriteText("\n\t\t Illnesses:");    MainEditBox->EndBold();    MainEditBox->BeginTextColour(wxColour(239, 51, 10));    MainEditBox->WriteText("placeholder");    MainEditBox->EndTextColour();    MainEditBox->BeginBold();    MainEditBox->WriteText("\n\t\t Accidents:");    MainEditBox->EndBold();    MainEditBox->BeginTextColour(wxColour(239, 51, 10));    MainEditBox->WriteText("placeholder");    MainEditBox->EndTextColour();}void MainFrame::Allergies(wxCommandEvent& WXUNUSED(event)) {    wxString str = popUpHandeler->MultipleChoiceDialog("DialogInformation/Allergies.txt", "what are your allergies?");    MainEditBox->WriteText("patients Aalergies are: \n");    MainEditBox->BeginTextColour(wxColour(52, 128, 235));    MainEditBox->BeginURL(str);    MainEditBox->WriteText(str);    MainEditBox->EndURL();    MainEditBox->EndTextColour();}void MainFrame::Body(wxCommandEvent& WXUNUSED(event)){    wxString str = popUpHandeler->bodyDialog("Select Locations.");    MainEditBox->WriteText("Cervical Adjustment: \n");    MainEditBox->BeginTextColour(wxColour(52, 128, 235));    MainEditBox->BeginURL(str);    MainEditBox->WriteText(str);    MainEditBox->EndURL();    MainEditBox->EndTextColour();}void MainFrame::Cervicaladjustment(wxCommandEvent& WXUNUSED(event)){    wxString str = popUpHandeler->MultipleChoiceDialog("DialogInformation/Cervicaladjustment.txt", "Cervical Adjustment");    MainEditBox->WriteText("Cervical Adjustment: \n");    MainEditBox->BeginTextColour(wxColour(52, 128, 235));    MainEditBox->BeginURL(str);    MainEditBox->WriteText(str);    MainEditBox->EndURL();    MainEditBox->EndTextColour();}void MainFrame::CompicatingFactors(wxCommandEvent& WXUNUSED(event)){    wxString str = popUpHandeler->MultipleChoiceDialog("DialogInformation/CompicatingFactors.txt", "Compicating Factors");    MainEditBox->WriteText("Compicating Factors: \n");    MainEditBox->BeginTextColour(wxColour(52, 128, 235));    MainEditBox->BeginURL(str);    MainEditBox->WriteText(str);    MainEditBox->EndURL();    MainEditBox->EndTextColour();}void MainFrame::contraindiction(wxCommandEvent& WXUNUSED(event)) {    wxString str = popUpHandeler->MultipleChoiceDialog("DialogInformation/contraindication.txt", "contraindiction");    MainEditBox->WriteText("Contraindiction is: \n");    MainEditBox->BeginTextColour(wxColour(52, 128, 235));    MainEditBox->BeginURL(str);    MainEditBox->WriteText(str);    MainEditBox->EndURL();    MainEditBox->EndTextColour();}void MainFrame::DietNutrition(wxCommandEvent& WXUNUSED(event)) {    wxString str = popUpHandeler->MultipleChoiceDialog("DialogInformation/DietNutrition.txt", "what is your diet like?");    MainEditBox->WriteText("the patients diet is: \n");    MainEditBox->BeginTextColour(wxColour(52, 128, 235));    MainEditBox->BeginURL(str);    MainEditBox->WriteText(str);    MainEditBox->EndURL();    MainEditBox->EndTextColour();}void MainFrame::DificultyPerforming(wxCommandEvent& WXUNUSED(event)){    wxString str = popUpHandeler->MultipleChoiceDialog("DialogInformation/dificultyPerforming.txt", "Dificulty Performing");    MainEditBox->WriteText("Dificulty Performing: \n");    MainEditBox->BeginTextColour(wxColour(52, 128, 235));    MainEditBox->BeginURL(str);    MainEditBox->WriteText(str);    MainEditBox->EndURL();    MainEditBox->EndTextColour();}void MainFrame::DrugsMedication(wxCommandEvent& WXUNUSED(event)){    wxString str = popUpHandeler->MultipleChoiceDialog("DialogInformation/drugsMedication.txt", "Drugs Medication");    MainEditBox->WriteText("Drugs Medication: \n");    MainEditBox->BeginTextColour(wxColour(52, 128, 235));    MainEditBox->BeginURL(str);    MainEditBox->WriteText(str);    MainEditBox->EndURL();    MainEditBox->EndTextColour();}void MainFrame::familyHistory(wxCommandEvent& WXUNUSED(event)) {    wxString str = popUpHandeler->MultipleChoiceDialog("DialogInformation/familyHistory.txt", "Family History");    MainEditBox->WriteText("the Patient has a family history of: \n");    MainEditBox->BeginTextColour(wxColour(52, 128, 235));    MainEditBox->BeginURL(str);    MainEditBox->WriteText(str);    MainEditBox->EndURL();    MainEditBox->EndTextColour();}void MainFrame::FreqofPain(wxCommandEvent& WXUNUSED(event)) {    wxString str = popUpHandeler->SingleChoiceDialog("DialogInformation/FreqOfPain.txt", "Frequency of pain?");    MainEditBox->WriteText("pain/discomfort is: \n");    MainEditBox->BeginTextColour(wxColour(52, 128, 235));    MainEditBox->BeginURL(str);    MainEditBox->WriteText(str);    MainEditBox->EndURL();    MainEditBox->EndTextColour();    MainEditBox->WriteText("(100%)being the worst. \n");}void MainFrame::Restrictions(wxCommandEvent& WXUNUSED(event)){    wxString str = popUpHandeler->MultipleChoiceDialog("DialogInformation/restrictions.txt", "Restrictions?");    MainEditBox->WriteText("Restrictions: \n");    MainEditBox->BeginTextColour(wxColour(52, 128, 235));    MainEditBox->BeginURL(str);    MainEditBox->WriteText(str);    MainEditBox->EndURL();    MainEditBox->EndTextColour();}void MainFrame::rateofImprove(wxCommandEvent& WXUNUSED(event)) {    wxString str = popUpHandeler->SingleChoiceDialog("DialogInformation/rateofImprove.txt", "what is your improvment/decline?");    MainEditBox->BeginTextColour(wxColour(52, 128, 235));    MainEditBox->BeginURL(str);    MainEditBox->WriteText(str);    MainEditBox->EndURL();    MainEditBox->EndTextColour();}void MainFrame::Side(wxCommandEvent& WXUNUSED(event)){    wxString str = popUpHandeler->SingleChoiceDialog("DialogInformation/side.txt", "Select Side?");    MainEditBox->WriteText("Side: \n");    MainEditBox->BeginTextColour(wxColour(52, 128, 235));    MainEditBox->BeginURL(str);    MainEditBox->WriteText(str);    MainEditBox->EndURL();    MainEditBox->EndTextColour();}void MainFrame::socialhabits(wxCommandEvent& WXUNUSED(event)) {    wxString str = popUpHandeler->MultipleChoiceDialog("DialogInformation/socialhabits.txt", "what is your social habits?");    MainEditBox->WriteText("the patients social behavior is: \n");    MainEditBox->BeginTextColour(wxColour(52, 128, 235));    MainEditBox->BeginURL(str);    MainEditBox->WriteText(str);    MainEditBox->EndURL();    MainEditBox->EndTextColour();}void MainFrame::SpecificMuscles(wxCommandEvent& WXUNUSED(event)){    wxString str = popUpHandeler->MultipleChoiceDialog("DialogInformation/SpecificMuseles.txt", "Select muscle groups?");    MainEditBox->WriteText("Muscle groups: \n");    MainEditBox->BeginTextColour(wxColour(52, 128, 235));    MainEditBox->BeginURL(str);    MainEditBox->WriteText(str);    MainEditBox->EndURL();    MainEditBox->EndTextColour();}void MainFrame::spineDialog(wxCommandEvent& WXUNUSED(event)) {    wxString str = popUpHandeler->MultipleChoiceDialog("DialogInformation/spineSegmentsL-R.txt", "what is your diet like?");    MainEditBox->WriteText("the reports spinal issues in: \n");    MainEditBox->BeginTextColour(wxColour(52, 128, 235));    MainEditBox->BeginURL(str);    MainEditBox->WriteText(str);    MainEditBox->EndURL();    MainEditBox->EndTextColour();}void MainFrame::surgicalHistory(wxCommandEvent& WXUNUSED(event)) {    wxString str = popUpHandeler->MultipleChoiceDialog("DialogInformation/surgicalHistory.txt", "what is your surgical history?");    MainEditBox->BeginTextColour(wxColour(52, 128, 235));    MainEditBox->BeginURL(str);    MainEditBox->WriteText(str);    MainEditBox->EndURL();    MainEditBox->EndTextColour();}void MainFrame::Work(wxCommandEvent& WXUNUSED(event)) {    wxString str = popUpHandeler->MultipleChoiceDialog("DialogInformation/work.txt", "Select work habits?");    MainEditBox->WriteText("Work habits include: \n");    MainEditBox->BeginTextColour(wxColour(52, 128, 235));    MainEditBox->BeginURL(str);    MainEditBox->WriteText(str);    MainEditBox->EndURL();    MainEditBox->EndTextColour();}